grammar Flowquery
  rule query_file
    space first:definition space rest:(';' space definition:definition space)* ';'? space
    <QueryFile> {
      def definitions; [first] + rest.elements.map(&:definition); end
    }
  end

  rule definition
    table_definition / function_definition
  end

  rule table_definition
    'create' separator 'table' separator defined_name:identifier space '(' space
    first:column_declaration space rest:(',' space column:column_declaration space)* ')'
    <TableDefinition> {
      def columns; [first] + rest.elements.map(&:column); end
    }
  end

  rule column_declaration
    name:identifier separator type:identifier <ColumnDeclaration>
  end

  rule function_definition
    defined_name:identifier space param_list:param_list? space '=' space value:function_rhs
    <FunctionDefinition>
  end

  # The list of declared parameters on the left-hand side of a function definition
  rule param_list
    '(' space first:param_declaration space rest:(',' space param:param_declaration space)* ')' {
      def params; [first] + rest.elements.map(&:param); end
    }
  end

  # A single declared parameter in a function definition
  rule param_declaration
    name:identifier '' <ParamDeclaration>
  end

  rule function_rhs
    expression / select_statement
  end

  rule expression
    equals_op / operand
  end

  rule operand
    function_application / variable_reference
  end

  rule equals_op
    left:operand space '=' space right:operand <EqualsOp>
  end

  rule function_application
    name:identifier space argument_list:argument_list <FunctionApplication>
  end

  rule argument_list
    '(' space first:expression space rest:(',' space argument:expression space)* ')' {
      def arguments; [first] + rest.elements.map(&:argument); end
    }
  end

  rule variable_reference
    name:identifier '' <VariableReference>
  end

  rule select_statement
    'select' separator columns:select_columns separator
    'from' separator table_name:variable_reference
    where_clause:(separator 'where' separator predicate:expression)?
    <SelectStatement> {
      def predicate; where_clause.predicate if where_clause.respond_to?(:predicate); end
    }
  end

  rule select_columns
    '*' {
      def all?; true; end
      def column_names; []; end
    } /
    first:identifier rest:(space ',' space column:identifier space)* {
      def all?; false; end
      def column_names; [first] + rest.elements.map(&:column); end
    }
  end


  # ======== Primitives ========

  # Any place where optional whitespace or comments may be inserted
  rule space
    separator?
  end

  # Any place where separation by whitespace or comments is required (e.g. between two words)
  rule separator
    (whitespace / block_comment / line_comment)+
  end

  rule block_comment
    '/*'
    ( !'*/' (. / "\n") )*
    '*/'
  end

  rule line_comment
    '//' (!"\n" .)*
  end

  rule keyword
    ('select' / 'from' / 'where' / 'create' / 'table') !identifier_char
  end

  rule identifier
    !keyword identifier_start_char identifier_char* <Identifier>
  end

  rule identifier_start_char
	[a-zA-Z_]
  end

  rule identifier_char
    identifier_start_char / [0-9]
  end

  rule whitespace
    [\t\r\n ]
  end
end
